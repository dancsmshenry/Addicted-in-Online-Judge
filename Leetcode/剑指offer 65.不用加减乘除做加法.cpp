class Solution {
public:
    int add(int a, int b){
        if (b == 0){
            return a;
        }

        int sum = a ^ b;
        /*关键，c++不支持负值左移，需要强制转换为无符号数*/
        int carry = ((unsigned int)(a & b) << 1);
        return add(sum ,carry);
    }
    /*
            对于两个数相加，可以分为两个部分，一个是两个数直接相加得到的值，即8+6=4，不考虑进位
            另一个是两个数得到的进位，即8+6=1
            而将数字换为二进制以后，发现不考虑进位就是数字之间异或的结果，设为sum
            而进位就是数字之间和的结果，设为carry
            获得的结果在plus(sum, carry)
            注意如果进位carry都是0的话，就代表得到结果了，直接退出即可

            前提：a-b
            这里的一个技巧就是~b再加一得到的是该数b的负数
            科普：一开始认为一个数本身就是他的正数，然后在它的最前面的一个数改为1之后，该数就变为了负数了
            但是这样导致正数和负数相加不为0
            所以就认为一个数去反以后，再加上1，就是该数的负数了（这正负数相加就为0了）

            所以，减法可以认为是一个正数加上另一个正数的负数版本
    */
};